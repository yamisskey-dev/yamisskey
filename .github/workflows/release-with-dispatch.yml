name: "Release Manager [Dispatch]"

on:
  workflow_dispatch:
    inputs:
      ## Specify the type of the next release.
      #version_increment_type:
      #  type: choice
      #  description: 'VERSION INCREMENT TYPE'
      #  default: 'patch'
      #  required: false
      #  options:
      #    - 'major'
      #    - 'minor'
      #    - 'patch'
      merge:
        type: boolean
        description: 'MERGE RELEASE BRANCH TO MAIN'
        default: false
      start-rc:
        type: boolean
        description: 'Start Release Candidate'
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      is_nayami: ${{ steps.check.outputs.is_nayami }}
    steps:
      - name: Check if branch is nayami
        id: check
        run: |
          if [ "${{ github.ref_name }}" = "nayami" ]; then
            echo "is_nayami=true" >> $GITHUB_OUTPUT
          else
            echo "is_nayami=false" >> $GITHUB_OUTPUT
            echo "::error::This workflow only supports nayami branch. Current branch: ${{ github.ref_name }}"
            exit 1
          fi

  get-pr:
    runs-on: ubuntu-latest
    needs: check-branch
    if: ${{ needs.check-branch.outputs.is_nayami == 'true' }}
    outputs:
      pr_number: ${{ steps.get_pr.outputs.pr_number }}
    steps:
      - uses: actions/checkout@v4
      # headが$GITHUB_REF_NAME, baseがmasterかつopenのPRを1つ取得
      - name: Get PRs
        run: |
          echo "pr_number=$(gh pr list --limit 1 --search "head:$GITHUB_REF_NAME base:master is:open" --json number  --jq '.[] | .number')" >> $GITHUB_OUTPUT
        id: get_pr

  merge:
    uses: yamisskey-dev/release-manager-actions/.github/workflows/merge.yml@v2-yamisskey
    needs: [check-branch, get-pr]
    if: ${{ needs.check-branch.outputs.is_nayami == 'true' && needs.get-pr.outputs.pr_number != '' && inputs.merge == true }}
    with:
      pr_number: ${{ needs.get-pr.outputs.pr_number }}
      user: 'github-actions[bot]'
      package_jsons_to_rewrite: 'package.json'
      difference_path: 'DIFFERENCE.md'
      # Text to prepend to the changelog
      # The first line must be `## Unreleased`
      changes_template: |
        ## Unreleased

        ### General
        -

        ### Client
        -

        ### Server
        -

      use_external_app_to_release: ${{ vars.USE_RELEASE_APP == 'true' }}
      indent: '\t'
    secrets:
      RELEASE_APP_ID: ${{ secrets.RELEASE_APP_ID }}
      RELEASE_APP_PRIVATE_KEY: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

  create-prerelease:
    uses: yamisskey-dev/release-manager-actions/.github/workflows/create-prerelease.yml@v2-yamisskey
    needs: [check-branch, get-pr]
    if: ${{ needs.check-branch.outputs.is_nayami == 'true' && needs.get-pr.outputs.pr_number != '' && inputs.merge != true  }}
    with:
      pr_number: ${{ needs.get-pr.outputs.pr_number }}
      user: 'github-actions[bot]'
      package_jsons_to_rewrite: 'package.json'
      difference_path: 'DIFFERENCE.md'
      use_external_app_to_release: ${{ vars.USE_RELEASE_APP == 'true' }}
      indent: '\t'
      draft_prerelease_channel: alpha
      ready_start_prerelease_channel: beta
      prerelease_channel: ${{ inputs.start-rc && 'rc' || '' }}
      reset_number_on_channel_change: true
    secrets:
      RELEASE_APP_ID: ${{ secrets.RELEASE_APP_ID }}
      RELEASE_APP_PRIVATE_KEY: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

  create-target:
    uses: yamisskey-dev/release-manager-actions/.github/workflows/create-target.yml@v2-yamisskey
    needs: [check-branch, get-pr]
    if: ${{ needs.check-branch.outputs.is_nayami == 'true' && needs.get-pr.outputs.pr_number == '' }}
    with:
      user: 'github-actions[bot]'
      difference_path: 'DIFFERENCE.md'
      # The script for version increment.
      # process.env.CURRENT_VERSION: The current version.
      #
      # Yamisskey versioning (nayami → yami only)
      version_increment_script: |
        const currentVersion = process.env.CURRENT_VERSION;

        console.log(`DEBUG: Current version: ${currentVersion}`);

        // nayamiバージョン形式のみをサポート (-nayami-x.x.x)
        const nayamiMatch = currentVersion.match(/^(\d+\.\d+\.\d+)-nayami-(\d+)\.(\d+)\.(\d+)$/);
        console.log(`DEBUG: Nayami match result:`, nayamiMatch);

        if (nayamiMatch) {
          const [, baseVersion, yMajor, yMinor, yPatch] = nayamiMatch;

          console.log(`DEBUG: Parsed - baseVersion: ${baseVersion}, extension: ${yMajor}.${yMinor}.${yPatch}`);

          // nayami → yami プレフィックス変換（パッチバージョンはそのまま）
          const convertedVersion = `${baseVersion}-yami-${yMajor}.${yMinor}.${yPatch}`;
          console.log(`DEBUG: Converted version: ${convertedVersion}`);
          return convertedVersion;
        } else {
          // nayamiバージョン形式以外はエラー
          throw new Error(`Only nayami version format supported: ${currentVersion}. Expected format: yyyy.MM.patch-nayami-x.y.z`);
        }
      package_jsons_to_rewrite: 'package.json'
      use_external_app_to_release: ${{ vars.USE_RELEASE_APP == 'true' }}
      indent: '\t'
      draft_prerelease_channel: alpha
    secrets:
      RELEASE_APP_ID: ${{ secrets.RELEASE_APP_ID }}
      RELEASE_APP_PRIVATE_KEY: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
