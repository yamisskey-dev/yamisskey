name: "Release Manager [Dispatch]"

on:
  workflow_dispatch:
    inputs:
      ## Specify the type of the next release.
      #version_increment_type:
      #  type: choice
      #  description: 'VERSION INCREMENT TYPE'
      #  default: 'patch'
      #  required: false
      #  options:
      #    - 'major'
      #    - 'minor'
      #    - 'patch'
      merge:
        type: boolean
        description: 'MERGE RELEASE BRANCH TO MAIN'
        default: false
      start-rc:
        type: boolean
        description: 'Start Release Candidate'
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  get-pr:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get_pr.outputs.pr_number }}
    steps:
      - uses: actions/checkout@v4
      # headが$GITHUB_REF_NAME, baseが$STABLE_BRANCHかつopenのPRを1つ取得
      - name: Get PRs
        run: |
          echo "pr_number=$(gh pr list --limit 1 --search "head:$GITHUB_REF_NAME base:$STABLE_BRANCH is:open" --json number  --jq '.[] | .number')" >> $GITHUB_OUTPUT
        id: get_pr
        env:
          STABLE_BRANCH: ${{ vars.STABLE_BRANCH }}

  merge:
    uses: yamisskey-dev/release-manager-actions/.github/workflows/merge.yml@v2-yamisskey
    needs: get-pr
    if: ${{ needs.get-pr.outputs.pr_number != '' && inputs.merge == true }}
    with:
      pr_number: ${{ needs.get-pr.outputs.pr_number }}
      user: 'github-actions[bot]'
      package_jsons_to_rewrite: ${{ vars.PACKAGE_JSONS_TO_REWRITE }}
      changelog_file: 'DIFFERENCE.md'
      # Text to prepend to the changelog
      # The first line must be `## Unreleased`
      changes_template: |
        ## Unreleased

        ### Feat
        -

        ### Enhance
        -

        ### Client
        -

        ### Server
        -

      use_external_app_to_release: ${{ vars.USE_RELEASE_APP == 'true' }}
      indent: ${{ vars.INDENT }}
    secrets:
      RELEASE_APP_ID: ${{ secrets.RELEASE_APP_ID }}
      RELEASE_APP_PRIVATE_KEY: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

  create-prerelease:
    uses: yamisskey-dev/release-manager-actions/.github/workflows/create-prerelease.yml@v2-yamisskey
    needs: get-pr
    if: ${{ needs.get-pr.outputs.pr_number != '' && inputs.merge != true  }}
    with:
      pr_number: ${{ needs.get-pr.outputs.pr_number }}
      user: 'github-actions[bot]'
      package_jsons_to_rewrite: ${{ vars.PACKAGE_JSONS_TO_REWRITE }}
      changelog_file: 'DIFFERENCE.md'
      use_external_app_to_release: ${{ vars.USE_RELEASE_APP == 'true' }}
      indent: ${{ vars.INDENT }}
      draft_prerelease_channel: alpha
      ready_start_prerelease_channel: beta
      prerelease_channel: ${{ inputs.start-rc && 'rc' || '' }}
      reset_number_on_channel_change: true
    secrets:
      RELEASE_APP_ID: ${{ secrets.RELEASE_APP_ID }}
      RELEASE_APP_PRIVATE_KEY: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

  create-target:
    uses: yamisskey-dev/release-manager-actions/.github/workflows/create-target.yml@v2-yamisskey
    needs: get-pr
    if: ${{ needs.get-pr.outputs.pr_number == '' }}
    with:
      user: 'github-actions[bot]'
      changelog_file: 'DIFFERENCE.md'
      # The script for version increment.
      # process.env.CURRENT_VERSION: The current version.
      #
      # Yamisskey versioning (yyyy.MM.patch-[na|mu]yami-x.x.x or yyyy.MM.patch-yami-x.x.x) example
      version_increment_script: |
        const currentVersion = process.env.CURRENT_VERSION;
        
        // 拡張Yamisskeyバージョン形式に対応 (Misskeyプレリリース識別子も考慮)
        // パターン: 2024.11.0[-alpha.1]-[na|mu]yami-1.0.0
        const yamisskeyMatch = currentVersion.match(/^(\d+\.\d+\.\d+)(-(?:alpha|beta|rc)\.\d+)?-(na|mu)?yami-(\d+)\.(\d+)\.(\d+)(-(?:alpha|beta|rc)\.\d+)?$/);
        
        if (yamisskeyMatch) {
          const [, baseVersion, basePrerelease, prefix, yMajor, yMinor, yPatch, yamisskeyPrerelease] = yamisskeyMatch;
          const prereleaseStr = basePrerelease || ''; // Misskeyベースのプレリリース識別子を保持
          
          // プレフィックス変換ロジック
          if (prefix === 'mu') {
            // muyami → nayami (Misskeyプレリリース識別子とYamisskeyバージョンは保持)
            return `${baseVersion}${prereleaseStr}-nayami-${yMajor}.${yMinor}.${yPatch}`;
          } else if (prefix === 'na') {
            // nayami → yami (Misskeyプレリリース識別子とYamisskeyバージョンは保持)
            return `${baseVersion}${prereleaseStr}-yami-${yMajor}.${yMinor}.${yPatch}`;
          } else {
            // yamiの場合、エラーまたはそのまま返す（通常ここには来ない）
            throw new Error(`Cannot increment yami version: ${currentVersion}`);
          }
        } else {
          // Yamisskeyバージョン形式でない場合はエラー
          throw new Error(`Invalid Yamisskey version format: ${currentVersion}`);
        }
      ##Semver example
      #version_increment_script: |
      #  const [major, minor, patch] = process.env.CURRENT_VERSION.split('.');
      #  if ("${{ inputs.version_increment_type }}" === "major") {
      #    return `${Number(major) + 1}.0.0`;
      #  } else if ("${{ inputs.version_increment_type }}" === "minor") {
      #    return `${major}.${Number(minor) + 1}.0`;
      #  } else {
      #    return `${major}.${minor}.${Number(patch) + 1}`;
      #  }
      package_jsons_to_rewrite: ${{ vars.PACKAGE_JSONS_TO_REWRITE }}
      use_external_app_to_release: true
      indent: "\t"
      stable_branch: ${{ vars.STABLE_BRANCH }}
      draft_prerelease_channel: alpha
    secrets:
      RELEASE_APP_ID: ${{ secrets.RELEASE_APP_ID }}
      RELEASE_APP_PRIVATE_KEY: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
