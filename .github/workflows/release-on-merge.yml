name: "Release on Master Merge"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [closed]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'Release:'))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: version
        run: |
          current_version=$(jq -r '.version' package.json)
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "Current master version: $current_version"

          # yamiバージョン形式チェック
          if [[ "$current_version" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-yami-([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "✅ Valid yami version format"
            echo "is_yami=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Not a yami version format, skipping release"
            echo "is_yami=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag already exists
        id: tag_check
        if: steps.version.outputs.is_yami == 'true'
        run: |
          # リモートのタグも確認
          git fetch --tags
          if git tag --list | grep -q "^${{ steps.version.outputs.current_version }}$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Tag ${{ steps.version.outputs.current_version }} already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag ${{ steps.version.outputs.current_version }} does not exist"
          fi

      - name: Get difference
        id: difference
        if: steps.version.outputs.is_yami == 'true' && steps.tag_check.outputs.tag_exists == 'false'
        run: |
          if [ -f DIFFERENCE.md ]; then
            version="${{ steps.version.outputs.current_version }}"

            # 現在のバージョンのセクションを探す
            version_content=$(awk -v version="$version" '
              /^## / {
                if ($0 ~ "^## " version "$") {
                  found = 1
                  next
                }
                if (found) exit
              }
              found { print }
            ' DIFFERENCE.md)

            # バージョンセクションが見つからない場合はUnreleasedセクションを探す
            if [ -z "$version_content" ]; then
              version_content=$(awk '/^## Unreleased/,/^## [0-9]/ {
                if (/^## [0-9]/) exit
                if (!/^## Unreleased/) print
              }' DIFFERENCE.md)
            fi

            # それでも見つからない場合は最初のバージョンセクションを使用
            if [ -z "$version_content" ]; then
              version_content=$(awk '/^## [0-9]/,/^## [0-9]/ {
                if (NR > 1 && /^## [0-9]/) exit
                if (!/^## [0-9]/) print
              }' DIFFERENCE.md | head -20)
            fi

            if [ -n "$version_content" ]; then
              # AI Code Review Requestセクションを除去
              filtered_content=$(echo "$version_content" | sed '/### AI/,/^$/d' | sed '/^$/N;/^\n$/d')
              difference="$filtered_content"
            else
              difference="### Changes\n- See DIFFERENCE.md for detailed changes"
            fi

            # GitHubの出力形式に合わせてエスケープ
            {
              echo "difference<<EOF"
              echo -e "$difference"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            {
              echo "difference<<EOF"
              echo "### Changes"
              echo "- Release ${{ steps.version.outputs.current_version }}"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        if: steps.version.outputs.is_yami == 'true' && steps.tag_check.outputs.tag_exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 既存のタグを削除（もし存在する場合）
          if git tag --list | grep -q "^${{ steps.version.outputs.current_version }}$"; then
            echo "Deleting existing local tag"
            git tag -d "${{ steps.version.outputs.current_version }}"
          fi

          # リモートのタグも削除を試行（エラーは無視）
          git push --delete origin "${{ steps.version.outputs.current_version }}" || true

          # 新しいタグを作成
          git tag -a "${{ steps.version.outputs.current_version }}" -m "Release ${{ steps.version.outputs.current_version }}"
          git push origin "${{ steps.version.outputs.current_version }}"

      - name: Create GitHub Release
        if: steps.version.outputs.is_yami == 'true' && steps.tag_check.outputs.tag_exists == 'false'
        run: |
          # 既存のリリースを削除（もし存在する場合）
          gh release delete "${{ steps.version.outputs.current_version }}" --yes || true

          # 新しいリリースを作成
          gh release create "${{ steps.version.outputs.current_version }}" \
            --title "Release ${{ steps.version.outputs.current_version }}" \
            --notes "${{ steps.difference.outputs.difference }}" \
            --target master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.version.outputs.is_yami == 'true' && steps.tag_check.outputs.tag_exists == 'false'
        run: |
          echo "🎉 Successfully created release: ${{ steps.version.outputs.current_version }}"
          echo "📋 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.current_version }}"
