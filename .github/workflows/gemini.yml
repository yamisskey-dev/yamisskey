---
name: Gemini PR Assistant

'on':
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize]

jobs:
  gemini-code-action:
    if: |
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, '@gemini')) ||
      (github.event_name == 'pull_request_review_comment' &&
       contains(github.event.comment.body, '@gemini')) ||
      (github.event_name == 'pull_request_review' &&
       contains(github.event.review.body, '@gemini')) ||
      (github.event_name == 'issues' &&
       contains(github.event.issue.body, '@gemini')) ||
      (github.event_name == 'pull_request' &&
       contains(github.event.pull_request.body, '@gemini'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate Event
        id: validate
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_URL: ${{ github.event.issue.pull_request }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "event_name=$EVENT_NAME" >> $GITHUB_OUTPUT
          if [ "$EVENT_NAME" = "pull_request" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          elif [ "$PR_URL" != "null" ] && [ "$PR_URL" != "" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "pr_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Gemini Code Review
        if: steps.validate.outputs.is_pr == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ steps.validate.outputs.pr_number }}
        run: |
          echo "Processing PR #$PR_NUMBER with Gemini Pro"

          # PRの差分を取得
          gh pr diff "$PR_NUMBER" > pr_diff.txt

          # 差分のサイズ制限（200行まで）
          head -200 pr_diff.txt > pr_diff_limited.txt

          # 差分が空の場合は終了
          if [ ! -s pr_diff_limited.txt ]; then
            echo "No diff found, skipping review"
            exit 0
          fi

          # PRのタイトルと説明を取得
          PR_TITLE=$(gh pr view "$PR_NUMBER" --json title --jq '.title')
          PR_BODY=$(gh pr view "$PR_NUMBER" --json body --jq '.body')

          # Gemini APIに送信するプロンプトを作成
          cat > gemini_prompt.txt << 'PROMPT_EOF'
          あなたはYamisskey（Misskeyフォーク）のコードレビュー専門のエンジニアです。以下のPRの差分を詳細にレビューし、具体的で建設的なフィードバックを提供してください。

          レビュー観点：
          1. セキュリティの問題
          2. パフォーマンスの問題
          3. バグの可能性
          4. コードの品質と可読性
          5. Yamisskey/Misskeyの設計パターンとの整合性
          6. TypeScript/JavaScript/Vue.jsのベストプラクティス

          問題がない場合は「問題なし」と記載してください。

          PR情報：
          PROMPT_EOF

          echo "タイトル: $PR_TITLE" >> gemini_prompt.txt
          echo "" >> gemini_prompt.txt
          echo "説明:" >> gemini_prompt.txt
          echo "$PR_BODY" >> gemini_prompt.txt
          echo "" >> gemini_prompt.txt
          echo "差分:" >> gemini_prompt.txt
          cat pr_diff_limited.txt >> gemini_prompt.txt

          # プロンプトをJSONエスケープ
          ESCAPED_PROMPT=$(jq -Rs . gemini_prompt.txt)

          # Gemini APIを呼び出してレビューを取得
          API_URL="https://generativelanguage.googleapis.com"
          API_PATH="/v1beta/models/gemini-1.5-pro:generateContent"
          FULL_URL="${API_URL}${API_PATH}?key=$GEMINI_API_KEY"
          
          # デバッグ情報を出力
          echo "Debug: API Key available: ${GEMINI_API_KEY:+YES}"
          echo "Debug: Prompt file size: $(wc -c < gemini_prompt.txt) bytes"
          
          # APIリクエストを実行
          API_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST "$FULL_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [
                {
                  \"parts\": [
                    {
                      \"text\": $ESCAPED_PROMPT
                    }
                  ]
                }
              ],
              \"generationConfig\": {
                \"maxOutputTokens\": 4000,
                \"temperature\": 0.3
              }
            }")
          
          # HTTPステータスコードを抽出
          HTTP_STATUS=$(echo "$API_RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          API_BODY=$(echo "$API_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Debug: HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            REVIEW_RESULT=$(echo "$API_BODY" | jq -r '.candidates[0].content.parts[0].text // "レスポンス解析失敗"')
          else
            ERROR_MSG=$(echo "$API_BODY" | jq -r '.error.message // "不明なエラー"')
            REVIEW_RESULT="API呼び出しエラー (HTTP $HTTP_STATUS): $ERROR_MSG"
          fi

          # レビューコメントを作成
          echo "## ✨ Gemini Pro Code Review" > comment.md
          echo "" >> comment.md
          echo "**レビュー対象:** PR #$PR_NUMBER" >> comment.md
          echo "**モデル:** Gemini-1.5-Pro" >> comment.md
          echo "" >> comment.md
          echo "### レビュー結果" >> comment.md
          echo "" >> comment.md
          echo "$REVIEW_RESULT" >> comment.md
          echo "" >> comment.md
          echo "---" >> comment.md
          echo "*AI によるコードレビューです。参考程度にご活用ください。*" >> comment.md

          # PRにコメント
          gh pr comment "$PR_NUMBER" --body-file comment.md
